version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: viewrush-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - viewrush-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: viewrush-api
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost,https://localhost
    volumes:
      - ./logs:/app/logs
    networks:
      - viewrush-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Database (PostgreSQL)
  db:
    image: postgres:15-alpine
    container_name: viewrush-db
    environment:
      - POSTGRES_DB=viewrush
      - POSTGRES_USER=viewrush_user
      - POSTGRES_PASSWORD=viewrush_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - viewrush-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U viewrush_user -d viewrush"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: viewrush-redis
    command: redis-server --appendonly yes --requirepass viewrush_redis_password
    volumes:
      - redis_data:/data
    networks:
      - viewrush-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  viewrush-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local